package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import bean.ProjectDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_DB".
*/
public class ProjectDbDao extends AbstractDao<ProjectDb, Long> {

    public static final String TABLENAME = "PROJECT_DB";

    /**
     * Properties of entity ProjectDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, String.class, "pid", false, "PID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Info = new Property(3, String.class, "info", false, "INFO");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property Urlprefix = new Property(5, String.class, "urlprefix", false, "URLPREFIX");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property AuthorStatus = new Property(7, Integer.class, "authorStatus", false, "AUTHOR_STATUS");
        public final static Property VirtualUrl = new Property(8, String.class, "virtualUrl", false, "VIRTUAL_URL");
        public final static Property Author = new Property(9, String.class, "author", false, "AUTHOR");
        public final static Property Authority = new Property(10, Integer.class, "authority", false, "AUTHORITY");
        public final static Property Username = new Property(11, String.class, "username", false, "USERNAME");
    };


    public ProjectDbDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PID\" TEXT," + // 1: pid
                "\"NAME\" TEXT," + // 2: name
                "\"INFO\" TEXT," + // 3: info
                "\"DESC\" TEXT," + // 4: desc
                "\"URLPREFIX\" TEXT," + // 5: urlprefix
                "\"STATUS\" INTEGER," + // 6: status
                "\"AUTHOR_STATUS\" INTEGER," + // 7: authorStatus
                "\"VIRTUAL_URL\" TEXT," + // 8: virtualUrl
                "\"AUTHOR\" TEXT," + // 9: author
                "\"AUTHORITY\" INTEGER," + // 10: authority
                "\"USERNAME\" TEXT);"); // 11: username
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProjectDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(2, pid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(4, info);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String urlprefix = entity.getUrlprefix();
        if (urlprefix != null) {
            stmt.bindString(6, urlprefix);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        Integer authorStatus = entity.getAuthorStatus();
        if (authorStatus != null) {
            stmt.bindLong(8, authorStatus);
        }
 
        String virtualUrl = entity.getVirtualUrl();
        if (virtualUrl != null) {
            stmt.bindString(9, virtualUrl);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(10, author);
        }
 
        Integer authority = entity.getAuthority();
        if (authority != null) {
            stmt.bindLong(11, authority);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(12, username);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProjectDb readEntity(Cursor cursor, int offset) {
        ProjectDb entity = new ProjectDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // info
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // urlprefix
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // authorStatus
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // virtualUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // author
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // authority
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // username
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProjectDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInfo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrlprefix(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAuthorStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setVirtualUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAuthor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAuthority(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setUsername(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProjectDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProjectDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
