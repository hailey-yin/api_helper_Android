package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import bean.ApiDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "API_DB".
*/
public class ApiDbDao extends AbstractDao<ApiDb, Long> {

    public static final String TABLENAME = "API_DB";

    /**
     * Properties of entity ApiDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, String.class, "pid", false, "PID");
        public final static Property Gid = new Property(2, Integer.class, "gid", false, "GID");
        public final static Property Aid = new Property(3, String.class, "aid", false, "AID");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property DeployStatus = new Property(5, Integer.class, "deployStatus", false, "DEPLOY_STATUS");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property Urlsuffix = new Property(8, String.class, "urlsuffix", false, "URLSUFFIX");
        public final static Property Method = new Property(9, String.class, "method", false, "METHOD");
        public final static Property Ability = new Property(10, Integer.class, "ability", false, "ABILITY");
        public final static Property Output = new Property(11, String.class, "output", false, "OUTPUT");
        public final static Property Status = new Property(12, Integer.class, "status", false, "STATUS");
    };


    public ApiDbDao(DaoConfig config) {
        super(config);
    }
    
    public ApiDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"API_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PID\" TEXT," + // 1: pid
                "\"GID\" INTEGER," + // 2: gid
                "\"AID\" TEXT," + // 3: aid
                "\"URL\" TEXT," + // 4: url
                "\"DEPLOY_STATUS\" INTEGER," + // 5: deployStatus
                "\"NAME\" TEXT," + // 6: name
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"URLSUFFIX\" TEXT," + // 8: urlsuffix
                "\"METHOD\" TEXT," + // 9: method
                "\"ABILITY\" INTEGER," + // 10: ability
                "\"OUTPUT\" TEXT," + // 11: output
                "\"STATUS\" INTEGER);"); // 12: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"API_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ApiDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(2, pid);
        }
 
        Integer gid = entity.getGid();
        if (gid != null) {
            stmt.bindLong(3, gid);
        }
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(4, aid);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        Integer deployStatus = entity.getDeployStatus();
        if (deployStatus != null) {
            stmt.bindLong(6, deployStatus);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String urlsuffix = entity.getUrlsuffix();
        if (urlsuffix != null) {
            stmt.bindString(9, urlsuffix);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(10, method);
        }
 
        Integer ability = entity.getAbility();
        if (ability != null) {
            stmt.bindLong(11, ability);
        }
 
        String output = entity.getOutput();
        if (output != null) {
            stmt.bindString(12, output);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(13, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ApiDb readEntity(Cursor cursor, int offset) {
        ApiDb entity = new ApiDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // gid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // aid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // deployStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // urlsuffix
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // method
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // ability
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // output
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ApiDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeployStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUrlsuffix(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMethod(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAbility(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setOutput(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStatus(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ApiDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ApiDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
